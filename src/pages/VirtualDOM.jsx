import { WarningOutlined } from "@ant-design/icons";

const VirtualDOM = () => {
  return (
    <div className="content">
      <h1>VirtualDOM</h1>
      <h2>Что такое DOM?</h2>
      <p className="text-block">
        DOM - это сокращение от "Document Object Model" (объектная модель
        документа).
      </p>
      <p className="text-block">
        Когда ты открываешь веб-страницу в браузере, браузер создает структуру
        документа, которую можно представить в виде дерева элементов. DOM
        позволяет нам манипулировать этой структурой, изменять содержимое,
        стили, добавлять и удалять элементы.
      </p>
      <p className="text-block">
        Если мы имеем дело с большим REACT-приложением с множеством элементов и
        компонентов, то КАЖДЫЙ РАЗ, КОГДА ПРОИСХОДИТ ИЗМЕНЕНИЕ данных в
        приложении, REACT должен обновить DOM, чтобы отобразить эти изменения на
        странице. Но вместо того, чтобы непосредственно вносить изменения в
        реальный DOM, React использует виртуальный DOM.
      </p>
      <div className="text-block-important">
        <WarningOutlined className="warning-icon" />
        <b> VirtualDOM </b> - это промежуточное представление DOM в памяти
        компьютера. React создает виртуальное дерево элементов, которое точно
        соответствует текущему состоянию компонентов. Затем React сравнивает это
        виртуальное дерево с реальным DOM и определяет, какие изменения
        необходимо внести.
      </div>
      <h2>В чем особенность VirtualDOM?</h2>
      <ul className="list">
        <li>
          <b>Эффективность:</b> Виртуальный DOM позволяет React оптимизировать
          обновление DOM. Вместо того, чтобы изменять каждый элемент по
          отдельности, React находит минимальный набор изменений, которые
          необходимо внести, и применяет их к реальному DOM. Это снижает
          нагрузку на браузер и улучшает производительность приложения.
        </li>
        <li>
          <b>Удобство программирования:</b> Работа с виртуальным DOM упрощает
          разработку. Ты можешь думать о компонентах и их состояниях, не
          беспокоясь о том, как React будет обновлять реальный DOM. React
          самостоятельно заботится об эффективных изменениях.
        </li>
        <li>
          <b>Переносимость:</b> Виртуальный DOM абстрагирует тебя от различий в
          реализации DOM в разных браузерах. Ты можешь писать свое приложение,
          не думая о том, какой браузер будет его запускать. React
          самостоятельно обрабатывает эти различия.
        </li>
      </ul>
      <h2>Reconcilation</h2>
      <p className="text-block">
        <b>Reconciliation</b> - это процесс, при котором React сравнивает
        предыдущее состояние компонента с новым состоянием и определяет, какие
        изменения нужно внести в UI.
      </p>
      <h2>Сценарий процесса Reconciliation</h2>
      <ol className="list">
        <li>
          <b>Обновление состояния:</b> Когда состояние компонента изменяется,
          React запускает процесс reconciliation. Он сравнивает предыдущее
          состояние компонента с новым состоянием, чтобы определить, какие части
          интерфейса нужно обновить.
        </li>
        <li>
          <b>Cравнение элементов:</b>С React сравнивает элементы, которые
          представляют компоненты, и их дочерние элементы. Он анализирует их
          типы, свойства и ключи, чтобы понять, какие элементы нужно обновить,
          добавить или удалить.
        </li>
        <li>
          <b>Обновление виртуального DOM:</b> React использует виртуальный DOM
          (Virtual DOM), который является внутренним представлением интерфейса.
          Он создает новое виртуальное дерево элементов на основе изменений
          состояния компонента.
        </li>
        <li>
          <b>Эффективные обновления:</b> React делает эффективные обновления,
          минимизируя количество фактических изменений в реальном DOM. Он
          определяет, какие элементы действительно нужно обновить, и применяет
          только эти изменения в реальном DOM, чтобы избежать ненужных операций.
        </li>
      </ol>
    </div>
  );
};
export { VirtualDOM };
